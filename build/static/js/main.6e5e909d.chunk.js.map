{"version":3,"sources":["reportWebVitals.js","context/auth.js","utils/MyPopUp.js","components/LikeButton.js","utils/graphql.js","components/DeleteButton.js","components/PostCard.js","utils/hooks.js","components/PostForm.js","pages/Home.js","pages/Register.js","pages/Login.js","components/MenuBar.js","utils/authRoute.js","pages/SinglePost.js","App.js","Apollo/Apollo.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","MyPopUp","content","children","Popup","inverted","trigger","LIKE_POST_MUTATION","gql","LikeButton","post","id","likes","likeCount","useContext","useState","liked","setLiked","useEffect","find","like","username","useMutation","variables","postId","likePost","Button","color","Icon","name","basic","as","Link","labelPosition","onClick","Label","pointing","FETCH_POSTS_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutations","update","proxy","data","readQuery","query","undefined","getPosts","filter","p","trim","writeQuery","onError","err","deletePostOrMutation","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","body","createdAt","commentCount","Card","fluid","Content","Image","size","src","Header","Meta","to","moment","fromNow","Description","extra","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","CREATE_POST_MUTATION","PostForm","createPost","result","console","log","error","Form","Field","TextArea","placeholder","className","graphQLErrors","message","Home","useQuery","loading","Grid","divided","Row","Column","Transition","Group","map","mobile","tablet","computer","marginTop","alignItems","REGISTER_USER","Register","context","errors","setErrors","addUser","email","password","confirmPassword","_","register","extensions","exception","noValidate","Input","label","primary","Object","keys","length","LOGIN_USER","Login","loginUser","history","push","MenuBar","pathName","window","location","pathname","path","substr","activeItem","setActiveItem","handleItemClick","e","Menu","secondary","Item","active","position","AuthRoute","Component","component","rest","render","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","SinglePost","postMarkUp","match","params","comment","setComment","commentInputRef","useRef","current","blur","submitComment","getPost","comments","width","ref","disabled","App","Container","exact","httpLink","createHttpLink","uri","authLink","setContext","headers","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.6e5e909d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, {useReducer, createContext } from \"react\";\nimport jwtDecode from \"jwt-decode\";\n\nconst initialState={user:null};\n\nif (localStorage.getItem(\"AppJwtToken\")) {\n     const decodedToken = jwtDecode(localStorage.getItem(\"AppJwtToken\"));\n     if (decodedToken.exp*1000<Date.now()) {\n      localStorage.removeItem(\"AppJwtToken\")\n     }else{\n       initialState.user=decodedToken; \n     }\n}\n\nconst AuthContext = createContext({\n  user: null,\n  login: (userData) => {},\n  logout: () => {},\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN\":\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      break;\n  }\n}\n\n\nfunction AuthProvider(props) {\n    const [state, dispatch] = useReducer(authReducer, initialState);\n    function login(userData){\n         localStorage.setItem(\"AppJwtToken\", userData.token)\n         dispatch({\n             type: \"LOGIN\",\n             payload: userData\n         })\n    }\n    function logout(){\n      localStorage.removeItem(\"AppJwtToken\")\n        dispatch({\n            type: \"LOGOUT\",\n        })\n    }\n    return (\n        <AuthContext.Provider\n           value={{user:state.user, login,logout}}\n           {...props}/>\n    )\n}\n\nexport {AuthContext, AuthProvider}","import React from 'react';\nimport{Popup} from 'semantic-ui-react';\n\nfunction MyPopUp({content, children}) {\n    return <Popup inverted content={content} trigger={children}/>\n}\n\nexport default MyPopUp\n","import { useMutation } from \"@apollo/react-hooks\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { Button, Icon, Label } from \"semantic-ui-react\";\nimport { AuthContext } from \"../context/auth\";\nimport {Link} from \"react-router-dom\";\nimport gql from \"graphql-tag\";\nimport MyPopUp from \"../utils/MyPopUp\";\n\nfunction LikeButton({ post: { id, likes, likeCount } }) {\n  const { user } = useContext(AuthContext);\n  const [liked, setLiked] = useState(false);\n  useEffect(() => {\n    if (user && likes.find((like) => like.username === user.username)) {\n      setLiked(true);\n    }else{\n      setLiked(false);\n    }\n  }, [user, likes]);\n\n  const [likePost]=useMutation(LIKE_POST_MUTATION,{\n    variables:{postId:id}\n  });\n\n  const LikeButton = user ? (\n    liked ? (\n      <Button color=\"teal\">\n        <Icon name=\"heart\" />\n      </Button>\n    ) : (\n      <Button color=\"teal\" basic>\n        <Icon name=\"heart\" />\n      </Button>\n    )\n  ) : (\n    <Button color=\"teal\" as={Link} basic>\n      <Icon name=\"heart\" />\n    </Button>\n  );\n\n  return (\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\n      <MyPopUp content={liked ?\"Unlike post\":\"Like post\"}>\n      {LikeButton}\n      </MyPopUp>\n      <Label as=\"a\" basic color=\"teal\" pointing=\"left\">\n        {likeCount}\n      </Label>\n    </Button>\n  );\n}\n\n\nconst LIKE_POST_MUTATION=gql`\n   mutation likePost($postId:String!){\n     likePost(postId:$postId){\n       id likes{\n         id username\n       }\n       likeCount\n     }\n   }\n`\nexport default LikeButton;\n","import gql from 'graphql-tag';\n\nexport  const FETCH_POSTS_QUERY = gql`\n{\n  getPosts {\n    id\n    username\n    createdAt\n    body\n    likeCount\n    commentCount\n    likes {\n      username\n    }\n    comments {\n      id\n      username\n      createdAt\n      body\n    }\n  }\n}\n`;","import React, { useState } from \"react\";\nimport { Button, Confirm, Icon } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\nimport MyPopUp from \"../utils/MyPopUp\";\n\nfunction DeleteButton({ postId, commentId, callback }) {\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const mutations = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION;\n  const [deletePostOrMutation] = useMutation(mutations, {\n    update(proxy) {\n      setConfirmOpen(false);\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n\n      if (data !== undefined && !commentId) {\n        data.getPosts = data.getPosts.filter(\n          (p) => p.id.trim() !== postId.trim()\n        );\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n        if (callback) callback();\n      }\n      //TODO: Remove post from cache\n    },\n    onError(err) {\n      return;\n    },\n    variables: { postId, commentId },\n  });\n  return (\n    <>\n      <MyPopUp\n        content={commentId?\"Delete this comment\":\"Delete this post\"}>\n        <Button\n            color=\"red\"\n            as=\"div\"\n            onClick={() => setConfirmOpen(true)}\n            floated=\"right\"\n          >\n            <Icon name=\"trash\" style={{ margin: 0 }} />\n          </Button>\n      </MyPopUp>\n      <Confirm\n        open={confirmOpen}\n        onCancel={() => setConfirmOpen(false)}\n        onConfirm={deletePostOrMutation}\n      />\n    </>\n  );\n}\n\nconst DELETE_POST_MUTATION = gql`\n  mutation deletePost($postId: ID!) {\n    deletePost(postId: $postId)\n  }\n`;\n\nconst DELETE_COMMENT_MUTATION = gql`\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\n    deleteComment(postId: $postId, commentId: $commentId) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default DeleteButton;\n","import React, { useContext } from \"react\";\nimport { Card, Image } from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon, Label } from \"semantic-ui-react\";\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from \"./LikeButton\";\nimport DeleteButton from \"./DeleteButton\";\nimport MyPopUp from \"../utils/MyPopUp\";\n\nfunction PostCard({\n  post: { body, createdAt, username, id, likes, likeCount, commentCount },\n}) {\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Card fluid>\n      <Card.Content>\n        <Image\n          floated=\"right\"\n          size=\"mini\"\n          src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n        />\n        <Card.Header>{username}</Card.Header>\n        <Card.Meta as={Link} to={`/posts/${id}`}>\n          {moment(createdAt).fromNow()}\n        </Card.Meta>\n        <Card.Description>{body}</Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <LikeButton post={{ id, likes, likeCount }} />\n        <MyPopUp content=\"Comment on this post\">\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n            <Button color=\"teal\" basic>\n              <Icon name=\"comments\" />\n            </Button>\n            <Label basic color=\"blue\" pointing=\"left\">\n              {commentCount}\n            </Label>\n          </Button>\n        </MyPopUp>\n        {\n          (user && user,\n          user.username === username && <DeleteButton postId={id} />)\n        }\n      </Card.Content>\n    </Card>\n  );\n}\n\nexport default PostCard;\n","import { useState } from \"react\";\n\nexport const useForm = (callback, initialState = {}) => {\n  const [values, setValues] = useState(initialState);\n\n  const onChange = (event) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    callback();\n  };\n\n  return {\n      onChange,\n      onSubmit,\n      values\n  }\n};\n","import React from \"react\";\nimport { Button, Form } from \"semantic-ui-react\";\nimport { useForm } from \"../utils/hooks\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\n\nfunction PostForm() {\n  const { values, onSubmit, onChange } = useForm(createPostCallBack, {\n    body: \"\",\n  });\n\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\n    variables: values,\n    update(proxy, result) {\n      const data = proxy.readQuery({\n        query: FETCH_POSTS_QUERY,\n      });\n      console.log(\"Hello there\", data);\n      if (data !== undefined) {\n        data.getPosts = [result.data.createPost, ...data.getPosts];\n        proxy.writeQuery({ query: FETCH_POSTS_QUERY, data });\n        values.body = \"\";\n      }\n    },\n    onError(err) {\n      return;\n    },\n  });\n\n  function createPostCallBack() {\n    createPost();\n  }\n\n  return (\n    <div>\n      <Form onSubmit={onSubmit}>\n        <h2>Create a post</h2>\n        <Form.Field>\n          <Form.TextArea\n            placeholder=\"Hi Learners\"\n            name=\"body\"\n            type=\"textarea\"\n            onChange={onChange}\n            error={error ? true : false}\n            value={values.body}\n          />\n\n          <Button type=\"submit\" color=\"teal\">\n            submit\n          </Button>\n        </Form.Field>\n      </Form>\n      {error && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            <li>{error.graphQLErrors[0].message}</li>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\n//graphql mutations\nconst CREATE_POST_MUTATION = gql`\n  mutation createPost($body: String!) {\n    createPost(body: $body) {\n      id\n      body\n      username\n      createdAt\n      likes {\n        id\n        username\n      }\n      likeCount\n      comments {\n        id\n        username\n        body\n        createdAt\n      }\n      commentCount\n    }\n  }\n`;\n\nexport default PostForm;\n","import React, { useContext } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { Grid, Transition } from \"semantic-ui-react\";\nimport PostCard from \"../components/PostCard\";\nimport { AuthContext } from \"../context/auth\";\nimport PostForm from \"../components/PostForm\";\nimport { FETCH_POSTS_QUERY } from \"../utils/graphql\";\n\nfunction Home() {\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY);\n  const { user } = useContext(AuthContext);\n\n  return (\n    <Grid divided>\n      <Grid.Row className=\"page-title\">\n        <h1>Recent Posts</h1>\n      </Grid.Row>\n      <Grid.Row>\n        {user && (\n          <Grid.Column>\n            <PostForm />\n          </Grid.Column>\n        )}\n      </Grid.Row>\n      <Grid.Row>\n        {loading ? (\n          <h1 className=\"loading\">..loading posts..</h1>\n        ) : (\n          <Transition.Group>\n            {data &&\n              data.getPosts.map((post) => (\n                <Grid.Column key={post.id} mobile={16} tablet={8} computer={8} style={{marginTop:15, alignItems:\"center\"}}>\n                  <PostCard post={post} />\n                </Grid.Column>\n              ))}\n          </Transition.Group>\n        )}\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default Home;\n","import React, { useState,useContext } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { useForm } from \"../utils/hooks\";\nimport {AuthContext} from \"../context/auth\";\nfunction Register(props) {\n  const context = useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n\n  const { onChange, onSubmit, values } = useForm(registerUser, {\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  });\n\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\n    update(_, {data:{register:userData}}) {\n      context.login(userData)\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values,\n  });\n\n  function registerUser() {\n    addUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1>Register</h1>\n        <Form.Input\n          label=\"Username\"\n          type=\"text\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          error={errors.username ? true : false}\n          value={values.username}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Email\"\n          type=\"email\"\n          placeholder=\"Email..\"\n          name=\"email\"\n          error={errors.email ? true : false}\n          value={values.email}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          type=\"password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          error={errors.password ? true : false}\n          value={values.password}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Confirm Password\"\n          type=\"password\"\n          placeholder=\"Confirm Password..\"\n          name=\"confirmPassword\"\n          error={errors.confirmPassword ? true : false}\n          value={values.confirmPassword}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>\n          Register\n        </Button>\n      </Form>\n      {Object.keys(errors).length > 0 && (\n        <div className=\"ui error message\">\n          <ul className=\"list\">\n            {Object.values(errors).map((value) => (\n              <li key={value}>{value}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n\n//graphql mutations\nconst REGISTER_USER = gql`\n  mutation register(\n    $username: String!\n    $email: String!\n    $password: String!\n    $confirmPassword: String!\n  ) {\n    register(\n      registerInput: {\n        username: $username\n        email: $email\n        password: $password\n        confirmPassword: $confirmPassword\n      }\n    ) {\n      id\n      email\n      username\n      token\n      createdAt\n    }\n  }\n`;\n\nexport default Register;\n","import React, { useState,useContext } from \"react\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport gql from \"graphql-tag\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { useForm } from \"../utils/hooks\";\nimport {AuthContext} from \"../context/auth\";\nfunction Login(props) {\n  const context=useContext(AuthContext);\n  const [errors, setErrors] = useState({});\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\n    username: \"\",\n    password: \"\",\n  });\n\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\n    update(_, {data:{login:userData}}) {\n      context.login(userData);\n      props.history.push(\"/\");\n    },\n    onError(err) {\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\n    },\n    variables: values,\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return (\n    <div className=\"form-container\">\n      <Form onSubmit={onSubmit} noValidate className={loading ? \"loading\" : \"\"}>\n        <h1>Login</h1>\n        <Form.Input\n          label=\"Username\"\n          type=\"text\"\n          placeholder=\"Username..\"\n          name=\"username\"\n          error={errors.username?true:false}\n          value={values.username}\n          onChange={onChange}\n        />\n        <Form.Input\n          label=\"Password\"\n          type=\"password\"\n          placeholder=\"Password..\"\n          name=\"password\"\n          error={errors.password?true:false}\n          value={values.password}\n          onChange={onChange}\n        />\n        <Button type=\"submit\" primary>login</Button>\n      </Form>\n      {Object.keys(errors).length>0&&\n      <div className=\"ui error message\">\n      <ul className=\"list\">\n        {Object.values(errors).map(value=>\n          (<li key={value}>{value}</li>))\n          }\n      </ul>\n    </div>}\n    </div>\n  );\n}\n\n//graphql mutations\nconst LOGIN_USER = gql`\n  mutation login(\n    $username: String!\n    $password: String!\n  ) {\n    login( username: $username\n        password: $password\n    ) {\n      id\n      email\n      username\n      token\n      createdAt\n    }\n  }\n`;\n\nexport default Login;\n","import React, { useContext, useState } from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"../context/auth\";\n\nfunction MenuBar() {\n  const { user, logout } = useContext(AuthContext);\n  const pathName = window.location.pathname;\n  const path = pathName === \"/\" ? \"home\" : pathName.substr(1);\n  const [activeItem, setActiveItem] = useState(path);\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  const menuBar = user ? (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item name={user.username} active as={Link} to=\"/\" />\n      <Menu.Menu position=\"right\">\n        <Menu.Item name=\"logout\" onClick={logout} />\n      </Menu.Menu>\n    </Menu>\n  ) : (\n    <Menu pointing secondary size=\"massive\" color=\"teal\">\n      <Menu.Item\n        name=\"home\"\n        active={activeItem === \"home\"}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/\"\n      />\n      <Menu.Item\n        name=\"login\"\n        active={activeItem === \"login\"}\n        onClick={handleItemClick}\n        as={Link}\n        to=\"/login\"\n      />\n      <Menu.Menu position=\"right\">\n        <Menu.Item\n          name=\"register\"\n          active={activeItem === \"register\"}\n          onClick={handleItemClick}\n          as={Link}\n          to=\"/register\"\n        />\n      </Menu.Menu>\n    </Menu>\n  );\n  return menuBar;\n}\n\nexport default MenuBar;\n","import React, { useContext } from 'react';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { AuthContext } from \"../context/auth\";\n\nfunction AuthRoute({ component: Component, ...rest }) {\n  const user = useContext(AuthContext);\n  \n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        user.user? <Redirect to=\"/\" /> : <Component {...props} />\n      }\n    />\n  );\n}\n\nexport default AuthRoute;\n","import React, { useContext, useState, useRef } from \"react\";\nimport gql from \"graphql-tag\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport {\n  Card,\n  Grid,\n  Image,\n  Label,\n  Icon,\n  Button,\n  Form,\n} from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { AuthContext } from \"../context/auth\";\nimport LikeButton from \"../components/LikeButton\";\nimport DeleteButton from \"../components/DeleteButton\";\nimport MyPopUp from \"../utils/MyPopUp\";\n\nfunction SinglePost(props) {\n  const postId = props.match.params.postId;\n  const { user } = useContext(AuthContext);\n  const { data } = useQuery(FETCH_POST_QUERY, { variables: { postId } });\n  const [comment, setComment] = useState(\"\");\n  const commentInputRef = useRef(null);\n\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n    update(_, result) {\n      setComment(\"\");\n      commentInputRef.current.blur();\n    },\n    variables: { postId, body: comment },\n  });\n\n  function deletePostCallback(params) {\n    props.history.push(\"/\");\n  }\n\n  let postMarkUp;\n  if (!data) {\n    postMarkUp = <p>Loading post....</p>;\n  } else {\n    const {\n      id,\n      body,\n      createdAt,\n      username,\n      comments,\n      likes,\n      likeCount,\n      commentCount,\n    } = data.getPost;\n    postMarkUp = (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column width={2}>\n            <Image\n              floated=\"right\"\n              size=\"small\"\n              src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n            />\n          </Grid.Column>\n          <Grid.Column width={14}>\n            <Card fluid>\n              <Card.Content>\n                <Card.Header>{username}</Card.Header>\n                <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                <Card.Description>{body}</Card.Description>\n              </Card.Content>\n              <hr />\n              <Card.Content extra>\n                <LikeButton user={user} post={{ id, likeCount, likes }} />\n                <MyPopUp content=\"Comment on post\">\n                  <Button\n                    as=\"div\"\n                    labelPosition=\"right\"\n                    onClick={() => console.log(\"comment on this post\")}\n                  >\n                    <Button basic color=\"blue\">\n                      <Icon name=\"comments\" />\n                    </Button>\n                    <Label basic color=\"blue\" pointing=\"left\">\n                      {commentCount}\n                    </Label>\n                  </Button>\n                </MyPopUp>\n                {\n                  (user && user.username === username && (\n                    <DeleteButton postId={id} callback={deletePostCallback} />\n                  ))\n                }\n              </Card.Content>\n            </Card>\n            {user && (\n              <Card fluid>\n                <Card.Content>\n                  <p>Post a comment</p>\n                  <Form>\n                    <div className=\"ui action input fluid\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"Comment..\"\n                        onChange={(event) => setComment(event.target.value)}\n                        value={comment}\n                        name=\"comment\"\n                        ref={commentInputRef}\n                      />\n                      <button\n                        type=\"submit\"\n                        className=\"ui button teal\"\n                        disabled={comment.trim() === \"\"}\n                        onClick={submitComment}\n                      >\n                        {\" \"}\n                        submit\n                      </button>\n                    </div>\n                  </Form>\n                </Card.Content>\n              </Card>\n            )}\n\n            {comments.map((comment) => (\n              <Card fluid key={comment.id}>\n                <Card.Content>\n                  {user && user.username === comment.username && (\n                    <DeleteButton postId={id} commentId={comment.id} />\n                  )}\n                  <Card.Header>{comment.username}</Card.Header>\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\n                  <Card.Description>{comment.body}</Card.Description>\n                </Card.Content>\n              </Card>\n            ))}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    );\n  }\n  return postMarkUp;\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postId: String!, $body: String!) {\n    createComment(postId: $postId, body: $body) {\n      id\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n  query($postId: ID!) {\n    getPost(postId: $postId) {\n      id\n      body\n      createdAt\n      username\n      likeCount\n      likes {\n        username\n      }\n      commentCount\n      comments {\n        id\n        username\n        createdAt\n        body\n      }\n    }\n  }\n`;\n\nexport default SinglePost;\n","import {BrowserRouter as Router , Route} from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport Home from './pages/Home';\nimport Register from './pages/Register';\nimport Login from './pages/Login';\nimport MenuBar from './components/MenuBar';\nimport { Container } from 'semantic-ui-react'\nimport{AuthProvider} from './context/auth'\nimport AuthRoute from './utils/authRoute';\nimport SinglePost from './pages/SinglePost';\n\nfunction App() {\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n        <MenuBar/>\n        <Route exact path='/' component={Home}/>\n        <AuthRoute exact path='/login' component={Login}/>\n        <AuthRoute exact path='/register' component={Register}/>\n        <Route exact path='/posts/:postId' component={SinglePost}/>\n        </Container>\n      </Router>\n    </AuthProvider>\n  );\n}\n \nexport default App;\n","import React from \"react\";\nimport App from \"../App\";\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { setContext } from \"apollo-link-context\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://fast-caverns-41450.herokuapp.com\",\n});\n\nconst authLink = setContext(() => {\n    const token =  localStorage.getItem('AppJwtToken')\n    return{\n        headers:{\n            Authorization:token?`Bearer ${token}`:''\n        }\n    }\n  });\n\nconst client= new ApolloClient({\n    link:authLink.concat(httpLink),\n    cache:new InMemoryCache()\n})\n\n\n  \nexport default(\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>\n)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport ApolloProvider from \"./Apollo/Apollo\";\n\nReactDOM.render(ApolloProvider, document.getElementById('root'));\nreportWebVitals();\n"],"sourceRoot":""}